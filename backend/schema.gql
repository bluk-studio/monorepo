# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Profile {
  _id: String!
  email: String!
  username: String
  projects: [Project!]!
}

type Project {
  """Unique project's id"""
  _id: String!

  """Non-unique project name"""
  name: String!

  """Optional project description"""
  description: String

  """Project's Settings object"""
  settings: ProjectSettings!
  members: [ProjectMember!]!
}

type ServerSettings {
  onlineMode: Boolean!
  whitelist: Boolean!
  address: String
}

type ProjectSettings {
  server: ServerSettings!
}

type MemberPermission {
  """ProjectMember instance of a person who added this permission"""
  issuer: ProjectMember!

  """Permission enumerable"""
  permission: Permission!
}

enum Permission {
  START
  STOP
  DELETE_PROJECT
  UPDATE_SERVER_SETTINGS
}

type MemberPermissions {
  """Unix date when last changes were made"""
  lastModified: Float

  """Set of MemberPermission objects"""
  list: [MemberPermission!]
}

type ProjectMember {
  """Unique ProjectMember instance id"""
  _id: String!
  profile: Profile!

  """Member's role"""
  role: MemberRole!
  permissions: MemberPermissions!
}

enum MemberRole {
  OWNER
  DEVELOPER
}

type ProjectDashboardConfig {
  """System ID of ProjectDashboardConfig instance"""
  _id: String!

  """Display name of ProjectDashboardConfig"""
  name: String!
  project: Project!
  profile: Profile!

  """Array of DashboardWidget's assosiated with this ProjectDashboardConfig"""
  widgets: [DashboardWidget!]!
}

union DashboardWidget = ControlsWidget | ConsoleWidget | PlayersWidget | LogsWidget

type ControlsWidget {
  type: String!
  enabled: Boolean!

  """X coordinate of DashboardWidget's position"""
  x: Float!

  """Y coordinate of DashboardWidget's position"""
  y: Float!

  """DashboardWidget's width"""
  height: Float!

  """DashboardWidget's height"""
  width: Float!
}

type ConsoleWidget {
  type: String!
  enabled: Boolean!

  """X coordinate of DashboardWidget's position"""
  x: Float!

  """Y coordinate of DashboardWidget's position"""
  y: Float!

  """DashboardWidget's width"""
  height: Float!

  """DashboardWidget's height"""
  width: Float!
}

type PlayersWidget {
  type: String!
  enabled: Boolean!

  """X coordinate of DashboardWidget's position"""
  x: Float!

  """Y coordinate of DashboardWidget's position"""
  y: Float!

  """DashboardWidget's width"""
  height: Float!

  """DashboardWidget's height"""
  width: Float!
}

type LogsWidget {
  type: String!
  enabled: Boolean!

  """X coordinate of DashboardWidget's position"""
  x: Float!

  """Y coordinate of DashboardWidget's position"""
  y: Float!

  """DashboardWidget's width"""
  height: Float!

  """DashboardWidget's height"""
  width: Float!
}

type Query {
  me: Profile!

  """Get Project instance from Project's id"""
  Project(projectId: String!): Project!

  """Fetch all ProjectObject's of a current profile"""
  ProfileProjects: [Project!]!
  ProjectDashboard(dashboardId: String!): ProjectDashboardConfig!
  ProjectDashboardByProfile(projectId: String): [ProjectDashboardConfig!]!
  CurrentProjectDashboard(projectId: String!): ProjectDashboardConfig!
}

type Mutation {
  login(token: String!): Profile!

  """Create new project using data passed into CreateProjectInput"""
  CreateProject(input: CreateProjectInput!): Project!

  """Deletes Project with passed _id and returns it"""
  DeleteProject(projectId: String!): Project!
  SetCurrentProjectDashboard(dashboardId: String!, projectId: String!): ProjectDashboardConfig!
  CreateProjectDashboard(projectId: String!, input: CreateDashboardConfigInput!): ProjectDashboardConfig!
  UpdateProjectDashboard(input: UpdateDashboardConfigInput!, dashboardId: String!): ProjectDashboardConfig!
  UpdateControlsWidget(input: UpdateControlsWidgetInput!, dashboardId: String!): ProjectDashboardConfig!
  UpdateConsoleWidget(input: UpdateConsoleWidgetInput!, dashboardId: String!): ProjectDashboardConfig!
  UpdatePlayersWidget(input: UpdatePlayersWidgetInput!, dashboardId: String!): ProjectDashboardConfig!
  UpdateLogsWidget(input: UpdateLogsWidgetInput!, dashboardId: String!): ProjectDashboardConfig!
  UpdateServerSettings(input: UpdateServerSettingsInput!, projectId: String!): ProjectSettings!
}

input CreateProjectInput {
  name: String!
  description: String
}

input CreateDashboardConfigInput {
  name: String!
}

input UpdateDashboardConfigInput {
  name: String
  widgets: [MovableDashboardWidgetInput!]
}

input MovableDashboardWidgetInput {
  type: EWidgetType!
  x: Float!
  y: Float!
  width: Float!
  height: Float!
}

"""DashboardWidget's type (CONSOLE, PLAYERS, and so on...)"""
enum EWidgetType {
  PLAYERS
  CONSOLE
  LOGS
  CONTROLS
}

input UpdateControlsWidgetInput {
  enabled: Boolean
}

input UpdateConsoleWidgetInput {
  enabled: Boolean
}

input UpdatePlayersWidgetInput {
  enabled: Boolean
}

input UpdateLogsWidgetInput {
  enabled: Boolean
}

input UpdateServerSettingsInput {
  whitelist: Boolean
  onlineMode: Boolean
  address: String
}
