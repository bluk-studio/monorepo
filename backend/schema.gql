# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Profile {
  _id: String!
  email: String!
  username: String
  token: String!
  projects: [Project!]!
}

type Project {
  """Unique project's id"""
  _id: String!

  """Non-unique project name"""
  name: String!

  """Optional project description"""
  description: String

  """Project's Settings object"""
  settings: ProjectSettings!
  members: [ProjectMember!]!
}

type ServerSettings {
  onlineMode: Boolean!
  whitelist: Boolean!
  address: String
}

type ProjectSettings {
  server: ServerSettings!
}

type MemberPermission {
  """ProjectMember instance of a person who added this permission"""
  issuer: ProjectMember!

  """Permission enumerable"""
  permission: Permission!
}

enum Permission {
  START
  STOP
  DELETE_PROJECT
  UPDATE_SERVER_SETTINGS
  SUBSCRIBE_TO_WORKER_STATE
  SUBSCRIBE_TO_EDITOR_SESSION
  ADD_PLUGIN_TO_PROJECT
  FETCH_RAW_PLUGINS
  UPDATE_RAW_PLUGINS
  UPDATE_RAW_PLUGIN_CODE
}

type MemberPermissions {
  """Unix date when last changes were made"""
  lastModified: Float

  """Set of MemberPermission objects"""
  list: [MemberPermission!]
}

type ProjectMember {
  """Unique ProjectMember instance id"""
  _id: String!
  profile: Profile!

  """Member's role"""
  role: MemberRole!
  permissions: MemberPermissions!
}

enum MemberRole {
  OWNER
  DEVELOPER
}

type WorkerRegion {
  id: String!
  name: String!
  location: String!
}

type WorkerState {
  state: ProjectWorkerState!
  region: WorkerRegion
  address: String
  project: Project!
}

enum ProjectWorkerState {
  DEAD
  ASSIGNING
  STARTING
  RUNNING
}

type PluginMarketplaceInformation {
  """Do we need to display this plugin in Marketplace?"""
  display: Boolean!
}

type RawPlugin {
  _id: String!

  """RawPlugin's title"""
  title: String!

  """RawPlugin's description"""
  description: String

  """Marketplace information"""
  marketplace: PluginMarketplaceInformation!

  """JavaScript code of this RawPlugin"""
  code: [String!]!
  creator: Profile!
  project: Project
}

type DashboardConfig {
  """System ID of ProjectDashboardConfig instance"""
  _id: String!

  """
  Type of this DashboardConfig (either PROJECT, CODE_EDITOR or VISUAL_EDITOR or else...)
  """
  type: EDashboardType!

  """Display name of DashboardConfig"""
  name: String!

  """Profile instance, that's assosiated with this DashboardConfig"""
  profile: Profile!

  """Array of DashboardWidget's assosiated with this DashboardConfig"""
  widgets: [DashboardWidget!]!
}

"""
DashboardConfig Type (either PROJECT, CODE_EDITOR, VISUAL_EDITOR or similar...)
"""
enum EDashboardType {
  PROJECT
  CODE_EDITOR
  VISUAL_EDITOR
}

union DashboardWidget = ControlsWidget | ConsoleWidget | PlayersWidget | LogsWidget | CodeEditorWidget

type CodeEditorWidget {
  type: String!
  enabled: Boolean!

  """X coordinate of DashboardWidget's position"""
  x: Float!

  """Y coordinate of DashboardWidget's position"""
  y: Float!

  """DashboardWidget's width"""
  height: Float!

  """DashboardWidget's height"""
  width: Float!
}

type ConsoleWidget {
  type: String!
  enabled: Boolean!

  """X coordinate of DashboardWidget's position"""
  x: Float!

  """Y coordinate of DashboardWidget's position"""
  y: Float!

  """DashboardWidget's width"""
  height: Float!

  """DashboardWidget's height"""
  width: Float!
}

type ControlsWidget {
  type: String!
  enabled: Boolean!

  """X coordinate of DashboardWidget's position"""
  x: Float!

  """Y coordinate of DashboardWidget's position"""
  y: Float!

  """DashboardWidget's width"""
  height: Float!

  """DashboardWidget's height"""
  width: Float!
}

type LogsWidget {
  type: String!
  enabled: Boolean!

  """X coordinate of DashboardWidget's position"""
  x: Float!

  """Y coordinate of DashboardWidget's position"""
  y: Float!

  """DashboardWidget's width"""
  height: Float!

  """DashboardWidget's height"""
  width: Float!
}

type PlayersWidget {
  type: String!
  enabled: Boolean!

  """X coordinate of DashboardWidget's position"""
  x: Float!

  """Y coordinate of DashboardWidget's position"""
  y: Float!

  """DashboardWidget's width"""
  height: Float!

  """DashboardWidget's height"""
  width: Float!
}

type Query {
  me: Profile!

  """Get Project instance from Project's id"""
  Project(projectId: String!): Project!

  """Fetch all ProjectObject's of a current profile"""
  ProfileProjects: [Project!]!
  RawPluginById(pluginId: String!): RawPlugin!
  RawPluginsByProfile(includeProjectPlugins: Boolean): [RawPlugin!]!
  RawPluginsByProject(projectId: String!): [RawPlugin!]!
  DashboardById(id: String!): DashboardConfig!
  DashboardsByType(type: EDashboardType!): [DashboardConfig!]!
  CurrentDashboard(resourceId: String!, dashboardType: EDashboardType!): DashboardConfig
}

type Mutation {
  login(token: String!): Profile!

  """Create new project using data passed into CreateProjectInput"""
  CreateProject(input: CreateProjectInput!): Project!

  """Deletes Project with passed _id and returns it"""
  DeleteProject(projectId: String!): Project!
  UpdateServerSettings(input: UpdateServerSettingsInput!, projectId: String!): ProjectSettings!
  AddPluginToProject(pluginId: String!, pluginType: EPluginType!, projectId: String!): Project!
  CreateRawPlugin(addToProject: String, input: PluginCreateInput!): RawPlugin!
  UpdateRawPluginCode(changes: [ContentChangeInput!]!, pluginId: String!): RawPlugin!
  CreateDashboard(dashboardType: EDashboardType!, input: CreateProjectInput!): DashboardConfig!
  UpdateDashboard(input: UpdateDashboardConfigInput!, dashboardId: String!): DashboardConfig!
  SetCurrentDashboard(dashboardId: String!, resourceId: String!): DashboardConfig!
  UpdateControlsWidget(input: UpdateControlsWidgetInput!, dashboardId: String!): ControlsWidget!
  UpdateConsoleWidget(input: UpdateConsoleWidgetInput!, dashboardId: String!): ConsoleWidget!
  UpdatePlayersWidget(input: UpdatePlayersWidgetInput!, dashboardId: String!): PlayersWidget!
  UpdateLogsWidget(input: UpdateLogsWidgetInput!, dashboardId: String!): LogsWidget!
}

input CreateProjectInput {
  name: String!
  description: String
}

input UpdateServerSettingsInput {
  whitelist: Boolean
  onlineMode: Boolean
  address: String
}

"""Plugin type"""
enum EPluginType {
  RAW_PLUGIN
  VISUAL_PLUGIN
  NODE
}

input PluginCreateInput {
  name: String!
  description: String
}

input ContentChangeInput {
  index: Float!
  text: String!
}

input UpdateDashboardConfigInput {
  name: String
  widgets: [MovableDashboardWidgetInput!]
}

input MovableDashboardWidgetInput {
  type: EWidgetType!
  x: Float!
  y: Float!
  width: Float!
  height: Float!
}

"""DashboardWidget's type (CONSOLE, PLAYERS, and so on...)"""
enum EWidgetType {
  PLAYERS
  CONSOLE
  LOGS
  CONTROLS
  CODE_EDITOR
}

input UpdateControlsWidgetInput {
  enabled: Boolean
}

input UpdateConsoleWidgetInput {
  enabled: Boolean
}

input UpdatePlayersWidgetInput {
  enabled: Boolean
}

input UpdateLogsWidgetInput {
  enabled: Boolean
}

type Subscription {
  CurrentWorkerState(token: String!, projectId: String!): WorkerState!
}
